/*
 * This file is generated by jOOQ.
 */
package eu.chargetime.ocpp.jsonserverimplementation.db.tables;



import eu.chargetime.ocpp.jsonserverimplementation.db.Keys;
import eu.chargetime.ocpp.jsonserverimplementation.db.Stevedb;
import eu.chargetime.ocpp.jsonserverimplementation.db.enums.TransactionStopEventActor;
import eu.chargetime.ocpp.jsonserverimplementation.db.tables.records.TransactionStopRecord;
import eu.chargetime.ocpp.jsonserverimplementation.utils.DateTimeConverter;

import org.joda.time.DateTime;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionStop extends TableImpl<TransactionStopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stevedb.transaction_stop</code>
     */
    public static final TransactionStop TRANSACTION_STOP = new TransactionStop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionStopRecord> getRecordType() {
        return TransactionStopRecord.class;
    }

    /**
     * The column <code>stevedb.transaction_stop.transaction_pk</code>.
     */
    public final TableField<TransactionStopRecord, Integer> TRANSACTION_PK = createField(DSL.name("transaction_pk"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>stevedb.transaction_stop.event_timestamp</code>.
     */
    public final TableField<TransactionStopRecord, DateTime> EVENT_TIMESTAMP = createField(DSL.name("event_timestamp"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new DateTimeConverter());

    /**
     * The column <code>stevedb.transaction_stop.event_actor</code>.
     */
    public final TableField<TransactionStopRecord, TransactionStopEventActor> EVENT_ACTOR = createField(DSL.name("event_actor"), SQLDataType.VARCHAR(7).asEnumDataType(TransactionStopEventActor.class), this, "");

    /**
     * The column <code>stevedb.transaction_stop.stop_timestamp</code>.
     */
    public final TableField<TransactionStopRecord, DateTime> STOP_TIMESTAMP = createField(DSL.name("stop_timestamp"), SQLDataType.TIMESTAMP(6).nullable(false), this, "", new DateTimeConverter());

    /**
     * The column <code>stevedb.transaction_stop.stop_value</code>.
     */
    public final TableField<TransactionStopRecord, String> STOP_VALUE = createField(DSL.name("stop_value"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>stevedb.transaction_stop.stop_reason</code>.
     */
    public final TableField<TransactionStopRecord, String> STOP_REASON = createField(DSL.name("stop_reason"), SQLDataType.VARCHAR(255), this, "");

    private TransactionStop(Name alias, Table<TransactionStopRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionStop(Name alias, Table<TransactionStopRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stevedb.transaction_stop</code> table reference
     */
    public TransactionStop(String alias) {
        this(DSL.name(alias), TRANSACTION_STOP);
    }

    /**
     * Create an aliased <code>stevedb.transaction_stop</code> table reference
     */
    public TransactionStop(Name alias) {
        this(alias, TRANSACTION_STOP);
    }

    /**
     * Create a <code>stevedb.transaction_stop</code> table reference
     */
    public TransactionStop() {
        this(DSL.name("transaction_stop"), null);
    }

    public <O extends Record> TransactionStop(Table<O> child, ForeignKey<O, TransactionStopRecord> key) {
        super(child, key, TRANSACTION_STOP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Stevedb.STEVEDB;
    }

    @Override
    public UniqueKey<TransactionStopRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTION_STOP_PRIMARY;
    }

    @Override
    public List<ForeignKey<TransactionStopRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TRANSACTION_STOP_TRANSACTION_PK);
    }

    private transient TransactionStart _transactionStart;

    /**
     * Get the implicit join path to the <code>stevedb.transaction_start</code>
     * table.
     */
    public TransactionStart transactionStart() {
        if (_transactionStart == null)
            _transactionStart = new TransactionStart(this, Keys.FK_TRANSACTION_STOP_TRANSACTION_PK);

        return _transactionStart;
    }

    @Override
    public TransactionStop as(String alias) {
        return new TransactionStop(DSL.name(alias), this);
    }

    @Override
    public TransactionStop as(Name alias) {
        return new TransactionStop(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStop rename(String name) {
        return new TransactionStop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionStop rename(Name name) {
        return new TransactionStop(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, DateTime, TransactionStopEventActor, DateTime, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
